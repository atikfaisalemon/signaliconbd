generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id           String   @id @default(cuid())
  email        String?  @unique
  phone        String   @unique
  name         String?
  fathersName  String?
  password     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  addresses    Address[]
  subscriptions Subscription[]
  transactions Transaction[]

  @@index([phone])
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  state     String?
  zip       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InternetPackage {
  id        String   @id @default(cuid())
  name      String
  price     Float
  speed     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]
}

model Subscription {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  packageId    String
  package      InternetPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  startDate    DateTime @default(now())
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  transactions Transaction[]
}

model Transaction {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId String
  subscription  Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  paymentMethod String
  amount        Float
  paymentDate   DateTime @default(now())
  status        TransactionStatus
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
